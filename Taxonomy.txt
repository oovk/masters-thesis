Class Amplifier
    - subClass OperationalAmplifier
        - subClass AutoZeroAmplifier
        - subClass ChopperAmplifier 
        - subClass GeneralPurposeAmplifier 
        - subClass HighSpeedAmplifier 
        - subClass LowNoiseAmplifier 
        - subClass LowOffsetVoltageAmplifier 
        - subClass LowPowerAmplifier 
        - subClass MicropowerAmplifier 
        - subClass PrecisionAmplifier 
        - subClass WidebandAmplifier 
    - subClass VideoAmplifier
        - subClass Single
        - subClass Dual
        - subClass Triple
        - subClass Quad
        - subClass Hex
    - subClass InstrumentalAmplifier
        - subClass Single
        - subClass Dual
    - subClass AudioAmplifier
        - subClass ClassAB
        - subClass ClassD
        - subClass ClassG
    - subClass RFAmplifier
        - subClass BroadbandAmplifier
        - subClass GeneralPurposeAmplifier
        - subClass LowNoiseAmplifier
        - subClass MMICAmplifier
        - subClass PowerAmplifier
        - subClass WidebandAmplifier
    - subClass GPSAmplifier
        - subClass LowNoiseAmplifier

ObjectProperties : Describe relationship between two individuals
    - hasProperty
        - SupplyVoltage
        - OperatingSupplyVoltage
        - SingleSupplyVoltage
        - DualSupplyVoltage
        - OperatingTemperature
        - SupplyCurrent
        - InputBiasCurrent
        - OutputCurrent
        - PSRR
        - CMRR
        - Gain
        - PowerGain
        - GainBandwidthProduct
        - PowerDissipation 
        - OperatingFrequency
        - NoiseFigure

    
DataProperties : Describe relationship between individuals and data values
    - hasNumericalValue
    - hasLowerBoundNumericalValue
    - hasUpperBoundNumericalValue
    - hasUnit
    - hasManufacturer
    - hasPowerSupplyType
    - hasInputSignalType
    - hasOutputSignalType
    - hasOutputType
    - hasPinCount 
    - hasProcessTechnology

    ** These have value, upper, lower **

    - PowerDissipation
        - hasMaximumPowerDissipation
    - SingleSupplyVoltage
        - hasTypicalSingleSupplyVoltage
        - hasMinimumSingleSupplyVoltage
        - hasMaximumSingleSupplyVoltage
    - OperatingTemperature
        - hasMinimumOperatingTemperature
        - hasMaximumOperatingTemperature
    - PSRR
        - hasMinimumPSRR
    - OperatingSupplyVoltage
        - hasMaximumOperatingSupplyVoltage
    - SupplyVoltage
        - hasMinimumSupplyVoltage
        - hasMaximumSupplyVoltage
    - DualSupplyVoltage
        - hasTypicalDualSupplyVoltage
        - hasMinimumDualSupplyVoltage
        - hasMaximumDualSupplyVoltage
    - CMRR
        - hasMinimumCMRR
    - InputBiasCurrent
        - hasMaximumInputBiasCurrent
    - OutputCurrent
        - hasTypicalOutputCurrent
    - GainBandwidthProduct
        - hasTypicalGainBandwidthProduct 
    - Gain
        - hasMaximumGain
    - OperatingFrequency
        - hasMinimumOperatingFrequency
        - hasMaximumOperatingFrequency
    - NoiseFigure
        - hasTypicalNoiseFigure
    - SupplyCurrent
        - hasMaximumSupplyCurrent
    - PowerGain    
        - hasTypicalPowerGain

    PQORS -> hasProperty -> SingleSupplyVoltage -> hasLowerBoundNumericalValue
                                                -> hasUpperBoundNumericalValue
                                                -> hasUnit




Amplifier
    OperationalAmplifier
        AutoZeroOperationalAmplifier
        ChopperOperationalAmplifier 
        GeneralPurposeOperationalAmplifier 
        HighSpeedOperationalAmplifier 
        LowNoiseOperationalAmplifier 
        LowOffsetVoltageOperationalAmplifier 
        LowPowerOperationalAmplifier 
        MicropowerOperationalAmplifier 
        PrecisionOperationalAmplifier 
        WidebandOperationalAmplifier 
    VideoAmplifier
        SingleVideoAmplifier
        DualVideoAmplifier
        TripleVideoAmplifier
        QuadVideoAmplifier
        HexVideoAmplifier
    InstrumentalAmplifier
        SingleInstrumentalAmplifier
        DualInstrumentalAmplifier
    AudioAmplifier
        ClassAB
        ClassD
        ClassG
    RFAmplifier
        BroadbandRFAmplifier
        GeneralPurposeRFAmplifier
        LowNoiseRFAmplifier
        MMICRFAmplifier
        PowerRFAmplifier
        WidebandRFAmplifier
    GPSAmplifier
        LowNoiseGPSAmplifier



    hasProperty
    
    "Entity"
    PowerDissipation 
    SingleSupplyVoltage
    SupplyVoltage
    OperatingTemperature
    OperatingSupplyVoltage
    DualSupplyVoltage
    SupplyCurrent
    InputBiasCurrent
    OutputCurrent
    PSRR
    CMRR
    Gain
    PowerGain
    GainBandwidthProduct
    OperatingFrequency
    NoiseFigure

    "Relations"
    hasNumericalValue
    hasLowerBoundNumericalValue
    hasUpperBoundNumericalValue
    hasUnit
    hasManufacturer 
    hasPowerSupplyType 
    hasInputSignalType
    hasOutputSignalType
    hasOutputType 
    hasPinCount
    hasProcessTechnology 


The domain of a property is the set of all objects that can have that
property asserted about it. The range is the set of all objects that can be the value of the property.

Restrictions: Only those values are allowed to assign to a particular individual of class


functions:

import json
from owlready2 import get_ontology, sync_reasoner_pellet

def create_individuals_from_json(json_file_path):
    
    # Load the ontology (replace 'your_ontology.owl' with your actual ontology file)
    ontology = get_ontology("file:///path/to/your_ontology.owl").load()

    # Read and parse the JSON file
    with open(json_file_path, 'r') as file:
        data = json.load(file)

    # Loop through the entire data array and create individuals
    for array in data:
        if array[0]["tail"] == "Single":
            SingleInstrumentalAmplifier = ontology.SingleInstrumentalAmplifier
            array[0]["head"] = SingleInstrumentalAmplifier(array[0]["head"])        
        else:
            DualInstrumentalAmplifier = ontology.DualInstrumentalAmplifier
            array[0]["head"] = DualInstrumentalAmplifier(array[0]["head"])

    # Save the ontology with the changes
    ontology.save(file="file:///path/to/your_ontology_with_changes.owl")

    # Optional: Perform reasoning (if needed)
    sync_reasoner_pellet(infer_property_values=True)

# Specify the path to your JSON file
json_file_path = './../ExtractedTriplets/InstruAmpTriplets.json'
# Call the function with the JSON file path
create_individuals_from_json(json_file_path)

[
    {
      "head": "INA101HP",
      "relation": "hasType",
      "tail": "Single"
    },
    {
      "head": "INA101HP",
      "relation": "hasManufacturer",
      "tail": "Texas Instruments"
    },
    {
      "head": "INA101HP",
      "relation": "hasPowerSupplyType",
      "tail": "Dual"
    },
    {
      "head": "INA101HP",
      "relation": "hasPinCount",
      "tail": "14"
    },
    {
      "head": "INA101HP",
      "relation": "hasProperty",
      "tail": "PSRR"
    },
    {
      "head": "PSRR",
      "relation": "hasLowerBoundNumericalValue",
      "tail": "-"
    },
    {
      "head": "PSRR",
      "relation": "hasUnit",
      "tail": "dB"
    },
    {
      "head": "INA101HP",
      "relation": "hasProperty",
      "tail": "OperatingSupplyVoltage"
    },
    {
      "head": "OperatingSupplyVoltage",
      "relation": "hasUpperBoundNumericalValue",
      "tail": "±20"
    },
    {
      "head": "OperatingSupplyVoltage",
      "relation": "hasUnit",
      "tail": "V"
    },
    {
      "head": "INA101HP",
      "relation": "hasProperty",
      "tail": "SupplyVoltage"
    },
    {
      "head": "SupplyVoltage",
      "relation": "hasLowerBoundNumericalValue",
      "tail": "30"
    },
    {
      "head": "SupplyVoltage",
      "relation": "hasUpperBoundNumericalValue",
      "tail": "50"
    },
    {
      "head": "SupplyVoltage",
      "relation": "hasUnit",
      "tail": "V"
    },
    {
      "head": "INA101HP",
      "relation": "hasProperty",
      "tail": "DualSupplyVoltage"
    },
    {
      "head": "DualSupplyVoltage",
      "relation": "hasNumericalValue",
      "tail": "±15"
    },
    {
      "head": "DualSupplyVoltage",
      "relation": "hasUnit",
      "tail": "V"
    },
    {
      "head": "INA101HP",
      "relation": "hasProperty",
      "tail": "SingleSupplyVoltage"
    },
    {
      "head": "SingleSupplyVoltage",
      "relation": "hasNumericalValue",
      "tail": "-"
    },
    {
      "head": "SingleSupplyVoltage",
      "relation": "hasUnit",
      "tail": "V"
    },
    {
      "head": "INA101HP",
      "relation": "hasProperty",
      "tail": "CMRR"
    },
    {
      "head": "CMRR",
      "relation": "hasLowerBoundNumericalValue",
      "tail": "-"
    },
    {
      "head": "CMRR",
      "relation": "hasUnit",
      "tail": "dB"
    },
    {
      "head": "INA101HP",
      "relation": "hasProperty",
      "tail": "InputBiasCurrent"
    },
    {
      "head": "InputBiasCurrent",
      "relation": "hasUpperBoundNumericalValue",
      "tail": "0.02"
    },
    {
      "head": "InputBiasCurrent",
      "relation": "hasUnit",
      "tail": "uA"
    },
    {
      "head": "INA101HP",
      "relation": "hasProperty",
      "tail": "OperatingTemperature"
    },
    {
      "head": "OperatingTemperature",
      "relation": "hasLowerBoundNumericalValue",
      "tail": "-"
    },
    {
      "head": "OperatingTemperature",
      "relation": "hasUpperBoundNumericalValue",
      "tail": "70"
    },
    {
      "head": "OperatingTemperature",
      "relation": "hasUnit",
      "tail": "°C"
    }
  ]

loop through the given json array if obj["relation"] == "hasType" then get the individual named
ob